---
description: "Guidelines e padr√µes para desenvolvimento de APIs no projeto ZabbixStore"
globs: "**/*.controller.ts, **/*.service.ts, **/*.module.ts, **/*.dto.ts, **/*.guard.ts, **/*.decorator.ts, **/main.ts"
alwaysApply: true
priority: high
category: "api-development"
tags: ["api", "nestjs", "rest", "swagger", "validation", "authentication"]
---

# üöÄ API Guidelines

## Estrutura e Arquitetura
- **Framework**: NestJS com TypeScript
- **Arquitetura Modular**: M√≥dulos separados por dom√≠nio (`auth`, `produto`, `pedido`, `pessoa`)
- **Padr√£o REST**: Endpoints seguindo conven√ß√µes RESTful
- **Versionamento**: Preparado para `/api/v1/` (estrutura base)

## Documenta√ß√£o e Swagger
- **Swagger UI**: Dispon√≠vel em `/api`
- **Configura√ß√£o**: `DocumentBuilder` com metadados completos
- **Tags**: Organiza√ß√£o por dom√≠nio (`auth`, `produto`, `pedido`, `pessoa`)
- **Bearer Auth**: Configurado para JWT tokens
- **Exemplos**: Todos os DTOs devem incluir exemplos

## Autentica√ß√£o e Autoriza√ß√£o
- **JWT**: Implementado via `@nestjs/jwt`
- **Guards**: `AuthGuard` global para prote√ß√£o de rotas
- **Roles**: Sistema de permiss√µes (`PERMISSAO` field)
- **Expira√ß√£o**: Tokens com 24h de validade padr√£o
- **Refresh**: Implementar quando necess√°rio

## Valida√ß√£o e DTOs
- **class-validator**: Valida√ß√µes obrigat√≥rias em todos os DTOs
- **class-transformer**: Transforma√ß√£o autom√°tica de tipos
- **Mensagens**: Erros em portugu√™s com contexto espec√≠fico
- **Swagger Decorators**: `@ApiProperty` para documenta√ß√£o
- **Valida√ß√µes Customizadas**: `@IsIn`, `@Min`, `@MaxLength`

## Estrutura de DTOs
```typescript
export class CreateProductDto {
  @ApiProperty({ description: 'Nome do produto', example: 'Camiseta Polo' })
  @IsNotEmpty({ message: 'Nome do produto √© obrigat√≥rio' })
  @IsString()
  @MaxLength(100)
  PRODUTO: string;
  
  // ... outros campos
}
```

## Tratamento de Erros
- **ValidationPipe Global**: Configurado com `whitelist: true`
- **Exception Filters**: Tratamento centralizado de exce√ß√µes
- **Status Codes**: Uso correto de c√≥digos HTTP
- **Logs**: Logger centralizado para debugging

## Configura√ß√µes Globais
- **CORS**: Configurado para `FRONTEND_URL`
- **Helmet**: Headers de seguran√ßa
- **Body Parser**: Limite de 10mb configurado
- **Rate Limiting**: Via `@nestjs/throttler`

## Endpoints Principais
- **Health Check**: `/health` para monitoramento
- **Auth**: `/auth/login`, `/auth/register`
- **Produtos**: CRUD completo com filtros
- **Pedidos**: Gest√£o de pedidos e itens
- **Pessoas**: Gest√£o de usu√°rios e endere√ßos

## Padr√µes de Nomenclatura

### Controllers
```typescript
@Controller('produtos')
@ApiTags('produtos')
export class ProdutoController {
  @Get()
  @ApiOperation({ summary: 'Listar todos os produtos' })
  async findAll() {
    // implementa√ß√£o
  }
}
```

### Services
```typescript
@Injectable()
export class ProdutoService {
  async findAll(): Promise<Produto[]> {
    // implementa√ß√£o
  }
}
```

### DTOs
```typescript
export class CreateProdutoDto {
  @ApiProperty()
  @IsNotEmpty()
  @IsString()
  PRODUTO: string;
}
```

## Middleware e Guards

### Auth Guard
```typescript
@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    // implementa√ß√£o
  }
}
```

### Roles Guard
```typescript
@Injectable()
export class RolesGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    // implementa√ß√£o
  }
}
```

## Interceptors

### Response Interceptor
```typescript
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    // implementa√ß√£o
  }
}
```

## Exception Filters

### Global Exception Filter
```typescript
@Catch()
export class GlobalExceptionFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    // implementa√ß√£o
  }
}
```

## Valida√ß√£o Customizada

### Validators
```typescript
@ValidatorConstraint({ name: 'isValidEmail', async: false })
export class IsValidEmailConstraint implements ValidatorConstraintInterface {
  validate(email: string) {
    // implementa√ß√£o
  }
}
```

## Configura√ß√£o de Ambiente

### Vari√°veis Obrigat√≥rias
```bash
NODE_ENV=development
JWT_SECRET=your-secret-key
DATABASE_URL=postgresql://postgres:password@localhost:5432/store_db
FRONTEND_URL=http://localhost:5173
```

## Logging e Monitoramento

### Logger Configuration
```typescript
import { Logger } from '@nestjs/common';

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);
  
  someMethod() {
    this.logger.log('Method called');
  }
}
```

## Health Checks

### Health Controller
```typescript
@Controller('health')
export class HealthController {
  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.db.pingCheck('database'),
    ]);
  }
}
```

## Rate Limiting

### Throttler Configuration
```typescript
@ThrottlerGuard()
@UseGuards(ThrottlerGuard)
export class AppController {
  // implementa√ß√£o
}
```

## CORS Configuration

### CORS Setup
```typescript
app.enableCors({
  origin: process.env.FRONTEND_URL,
  credentials: true,
});
```

## Security Headers

### Helmet Configuration
```typescript
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
    },
  },
}));
```

## Database Integration

### Prisma Service
```typescript
@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}
```

## Testing Guidelines

### Unit Tests
```typescript
describe('ProdutoService', () => {
  let service: ProdutoService;
  
  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [ProdutoService],
    }).compile();
    
    service = module.get<ProdutoService>(ProdutoService);
  });
  
  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
```

### Integration Tests
```typescript
describe('ProdutoController (e2e)', () => {
  let app: INestApplication;
  
  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();
    
    app = moduleFixture.createNestApplication();
    await app.init();
  });
  
  it('/produtos (GET)', () => {
    return request(app.getHttpServer())
      .get('/produtos')
      .expect(200);
  });
});
```

## Performance Guidelines

### Caching
```typescript
@CacheKey('products')
@CacheTTL(300)
@Get()
async findAll() {
  // implementa√ß√£o
}
```

### Pagination
```typescript
@Get()
async findAll(
  @Query('page') page: number = 1,
  @Query('limit') limit: number = 10,
) {
  // implementa√ß√£o com pagina√ß√£o
}
```

## Error Handling

### Custom Exceptions
```typescript
export class ProdutoNotFoundException extends HttpException {
  constructor() {
    super('Produto n√£o encontrado', HttpStatus.NOT_FOUND);
  }
}
```

### Validation Messages
```typescript
export class CreateProdutoDto {
  @IsNotEmpty({ message: 'Nome do produto √© obrigat√≥rio' })
  @IsString({ message: 'Nome deve ser uma string' })
  @MaxLength(100, { message: 'Nome deve ter no m√°ximo 100 caracteres' })
  PRODUTO: string;
}
```